# WARNING: This file was generated by chef, any edits you make here will be nuked!
# Instead consider amending the chef recipe and re-deploying with Knife Solo

# What ports/sockets to listen on, and what options for them.
listen "<%= @environment_root %>/shared/sockets/unicorn.sock", :backlog => 100

working_directory "<%= @environment_root %>/current"

# What the timeout for killing busy workers is, in seconds
timeout 60

# Whether the app should be pre-loaded
preload_app true

# How many worker processes
worker_processes <%= @unicorn_workers %>

if GC.respond_to?(:copy_on_write_friendly=)
  GC.copy_on_write_friendly = true
end

before_exec do |server|
  ENV["BUNDLE_GEMFILE"] = "<%= @environment_root %>/current/Gemfile"
end

# What to do before we fork a worker
before_fork do |server, worker|
  defined?(ActiveRecord::Base) && ActiveRecord::Base.connection.disconnect!

  old_pid = "<%= @environment_root %>/shared/pids/unicorn.pid.oldbin"
  if File.exists?(old_pid) && server.pid != old_pid
    begin
      Process.kill("QUIT", File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      # someone else did our job for us
    end
  end
end

# What to do after we fork a worker
after_fork do |server, worker|
  defined?(ActiveRecord::Base) && ActiveRecord::Base.establish_connection

  # Create worker pids too
  child_pid = server.config[:pid].sub(/pid$/, "#{worker.nr}.pid")
  system("echo #{Process.pid} > #{child_pid}")
end

# Where to drop a pidfile
pid "<%= @environment_root %>/shared/pids/unicorn.pid"

# Where stderr gets logged
stderr_path "<%= @environment_root %>/shared/log/unicorn.stderr.log"

# Where stdout gets logged
stdout_path "<%= @environment_root %>/shared/log/unicorn.stdout.log"
